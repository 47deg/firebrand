{"name":"Firebrand","tagline":"An Object 2 Cassandra Mapper","google":"UA-18433785-3","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"# Firebrand OCM\r\n\r\nFirebrand OCM is a simple library for persisting and querying [Java](http://en.wikipedia.org/wiki/Java_language)\r\nObjects to a Cassandra Database. Firebrand's goal is to provide an elegant and simple interface to bring the power and scalability\r\nof [Apache Cassandra](http://cassandra.apache.org/) to your application.\r\n\r\n# Download\r\n\r\n## Maven Dependency\r\n\r\nFirebrand may be automatically imported into your project if you already use [Maven](http://maven.apache.org/).\r\nJust declare Firebrand as a maven dependency. If you wish to always use the latest unstable snapshots, add the Sonatype\r\nrepository where the Firebrand snapshot artifacts are being deployed. Firebrand official releases will be made available at Maven Central.\r\n\r\n```xml\r\n<repository>\r\n    <id>sonatype</id>\r\n    <url>https://oss.sonatype.org/content/groups/public/</url>\r\n    <releases>\r\n        <enabled>true</enabled>\r\n        <updatePolicy>daily</updatePolicy>\r\n        <checksumPolicy>fail</checksumPolicy>\r\n    </releases>\r\n    <snapshots>\r\n        <enabled>true</enabled>\r\n        <updatePolicy>always</updatePolicy>\r\n        <checksumPolicy>ignore</checksumPolicy>\r\n    </snapshots>\r\n</repository>\r\n\r\n<dependency>\r\n    <groupId>org.firebrand</groupId>\r\n    <artifactId>firebrand</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n</dependency>\r\n```\r\n## JAR and others\r\n\r\nYou can get the releases, snapshots and other forms in which Firebrand is distributed from the [Downloads](https://github.com/47deg/firebrand/downloads) page.\r\n\r\n# Usage\r\n\r\n## Persistence Factory\r\n\r\nAccess to the persistence operations and all entity related operations are performed via the [PersistenceFactory](https://github.com/47deg/firebrand/blob/master/src/main/java/org/firebrand/dao/PersistenceFactory.java).\r\nThe persistence factory includes methods to perform the most common operations for creating, persisting,\r\nremoving and querying the entities persisted in the underlying Cassandra database.\r\n\r\n### Configuration\r\n\r\nFirebrand ships with an implementation of the [PersistenceFactory](https://github.com/47deg/firebrand/blob/master/src/main/java/org/firebrand/dao/PersistenceFactory.java) based on the popular Cassandra client [Hector](http://hector-client.org).\r\nYou can configure an instance of the [HectorPersistenceFactory](https://github.com/47deg/firebrand/blob/master/src/main/java/org/firebrand/dao/impl/HectorPersistenceFactory.java) programmatically or with an IOC container such as [Spring](http://www.springsource.org/).\r\nThe Persistence Factory is ment to be cached and reused throught the application lifecycle.\r\n\r\n#### Spring\r\n\r\n```xml\r\n<bean class=\"org.firebrand.dao.impl.hector.HectorPersistenceFactory\" init-method=\"init\" destroy-method=\"destroy\">\r\n        <property name=\"defaultConsistencyLevel\" value=\"ANY\" />\r\n        <property name=\"clusterName\" value=\"${cassandra.cluster}\" />\r\n        <property name=\"defaultKeySpace\" value=\"${cassandra.keyspace}\" />\r\n        <property name=\"contactNodes\" value=\"${cassandra.rpc.addresses}\"/>\r\n        <property name=\"thriftPort\" value=\"${cassandra.thrift.port}\" />\r\n        <property name=\"autoDiscoverHosts\" value=\"${cassandra.autoDiscoverHosts}\" />\r\n        <property name=\"entities\">\r\n            <list>\r\n                <value>com.yourcompany.domain.Entity</value>\r\n                ...\r\n            </list>\r\n        </property>\r\n    </bean>\r\n```\r\n\r\n```java\r\n@Autowired\r\nprivate PersistenceFactory persistenceFactory\r\n```\r\n\r\n#### Programmatically\r\n\r\n```java\r\nPersistenceFactory persistenceFactory = new HectorPersistenceFactory.Builder()\r\n                    .defaultConsistencyLevel(true)\r\n                    .clusterName(cluster)\r\n                    .defaultKeySpace(keySpace)\r\n                    .contactNodes(nodes)\r\n                    .thriftPort(port)\r\n                    .autoDiscoverHosts(autoDiscoverHosts)\r\n                    .entities(entities)\r\n                    .build();\r\n```\r\n\r\n### Get\r\n\r\nLoad any entity from the data store by key.\r\n\r\n```java\r\nEntity entity = peristenceFactory.get(Entity.class, key);\r\n```\r\n\r\n### Persist\r\n\r\nPersist one or multiple entities.\r\n\r\n```java\r\nEntity entity = ...;\r\nentity.setName(name);\r\npersistenceFactory.persist(entity)\r\n```\r\n\r\n```java\r\nEntity one = ...;\r\nEntity two = ...;\r\nEntity three = ...;\r\npersistenceFactory.persist(one, two, three, ...);\r\n```\r\n\r\n### Remove\r\n\r\nRemove one or multiple entities.\r\n\r\n```java\r\nEntity entity = ...\r\npersistenceFactory.remove(entity)\r\n```\r\n\r\n```java\r\nEntity one = ...;\r\nEntity two = ...;\r\nEntity three = ...;\r\npersistenceFactory.remove(one, two, three, ...);\r\n```\r\n\r\n### Query\r\n\r\nFirebrand supports [CQL](http://cassandra.apache.org/doc/cql/CQL.html) to fetch managed entities.\r\nThe Persistence Factory understands both [**Named Queries**](#named-queries) and [Query](https://github.com/47deg/firebrand/blob/master/src/main/java/org/firebrand/dao/Query.java) statements generated by the [QueryBuilder](#query-builder).\r\n\r\n#### Query Builder\r\n\r\nA [Query Builder](#query-builder) is included with support for most of the statements and clauses supported by CQL that may be used\r\nto construct a Query. The Query Builder acts as a static builder that may be imported statically for quick and easy syntactic access to all its methods.\r\n\r\n```java\r\nimport static org.firebrand.dao.cql.QueryBuilder.*;\r\n...\r\nList<Account> accounts = factory.getResultList(Account.class, Query.get(select(allColumns(), from(Account.class))));\r\n```\r\n\r\n#### Named Queries\r\n\r\nNamed queries are loaded when the PersistenceFactory is initialized and can be referenced by name.\r\nNamed queries are declared using [@NamedQuery](#@namedquery) and support named parameters in the format of *:parameter*.\r\n\r\n```java\r\n@ColumnFamily\r\n@NamedQueries({\r\n\t\t@NamedQuery(name = Account.QUERY_ALL_ACCOUNTS_WITH_NAME, query = \"select * from Account where name = :name\")\r\n})\r\npublic class Account {\r\n\r\n\tpublic static final String QUERY_ALL_ACCOUNTS_WITH_NAME = \"Account.QUERY_ALL_ACCOUNTS_WITH_NAME\";\r\n\r\n    @Key\r\n    private String key;\r\n\r\n\t@Column(indexed = true)\r\n    private String name;\r\n\r\n    ... getters & setters\r\n\r\n}\r\n```\r\n\r\n```java\r\nList<Account> accounts = factory.getResultList(Account.class, Query.get(Account.QUERY_ALL_ACCOUNTS_WITH_NAME, new HashMap<String, Object>(){{\r\n    put(\"name\", name);\r\n}}));\r\n```\r\n\r\n### Enhanced instances\r\n\r\nFirebrand can increase performance and give you better control on how data is loaded at runtime if it knows when you are\r\ngoing to perform certain operations. For example, Firebrand can lazy load properties only when you invoke their getter instead of preloading\r\nall persistent properties and hidrating your model eagerly. In order to perform this operation Firebrand uses [Javassist](http://www.javassist.org)\r\nbased proxies of your entities that provide advice around invokation of certain methods.\r\nIn the rare event that you need to manually obtain proxies up front you can directly invoke [org.firebrand.dao.PersistenceFactory#getInstance(Class<Entity>)]()\r\n\r\n## Annotations\r\n\r\nFirebrand is an annotation based framework. Most annotations are declared directly in the classes that represent persistent entities.\r\n\r\n### @ColumnFamily\r\n\r\nThe Class *@ColumnFamily* annotation declares a class as persistent. Each instance of this class will have its [columns](#@column) persisted under the\r\nsame row.\r\n\r\n```java\r\n@ColumnFamily\r\npublic class Account {\r\n    ...\r\n}\r\n```\r\n\r\n### @Key\r\n\r\n\r\n\r\n### @Column\r\n\r\nThe field *@Column* annotation declares a field as a column. All fields are implicit considered as columns even when they\r\nare not annotated as such. To selectively ignore fields see [Transient](#@transient).\r\n\r\n```java\r\n@ColumnFamily\r\npublic class Account {\r\n\r\n    @Key\r\n    private String key;\r\n\r\n    @Column(indexed = true)\r\n    private String name;\r\n\r\n    ...\r\n\r\n}\r\n```\r\nColumns may be configured to affect they way the interact with the PersistenceFactory and the underlying Cassandra database.\r\nSome of the most common configuration properties for columns are as follows:\r\n\r\n* indexed - columns used in queries with eq, lt, ... must be indexed\r\n* lazy - wether this column's value will be loaded eagerly or lazily loaded when it's accesor is invoked.\r\n* validationClass - the validator used by cassandra when manipulating data\r\n* counter - if this column represents a counter type column\r\n* indexType - the type of index for the column\r\n\r\n### @CounterIncrease\r\n\r\nFields annotated with *@CounterIncrease* are evaluated to have a column with counter type column\r\nincreased or decreased on a persistence operation.\r\n\r\n```java\r\n@ColumnFamily(defaultValidationClass = CounterColumnType.class)\r\npublic class CounterEntity {\r\n\r\n\t@Key\r\n\tprivate String key;\r\n\r\n\t@Column(counter = true, validationClass = CounterColumnType.class)\r\n\tprivate long counterProperty;\r\n\r\n\t@CounterIncrease(\"counterProperty\")\r\n\tprivate long counterPropertyIncreaseBy;\r\n\r\n\t...\r\n}\r\n```\r\n\r\n### @Embedded\r\n\r\nFirebrand supports embedded classes.\r\nEmbedded entities are classes that do not represent a @ColumnFamily on its own and get flatten into the column family\r\nwhere they are declared.\r\nInner properties are persisted following a dot notation key as columns keys. e.g. credentials.password\r\nMultiple levels of embedded properties are supported.\r\n\r\n```java\r\npublic class Credentials {\r\n\r\n    private String password;\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\n```java\r\n@ColumnFamily\r\npublic class Account {\r\n\r\n    @Key\r\n    private String key;\r\n\r\n    @Embedded\r\n    private Credentials credentials;\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\n### @Mapped\r\n\r\nMapped properties represent a *to-one relationship.\r\n\r\n```java\r\n@ColumnFamily\r\npublic class Account {\r\n\r\n    @Key\r\n    private String key;\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\n```java\r\n@ColumnFamily\r\npublic class Profile {\r\n\r\n    @Key\r\n    private String key;\r\n\r\n    @Mapped\r\n    private Account account;\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\n### @MappedCollection\r\n\r\nMapped collections represent a reference *to-many relationship.\r\n\r\n```java\r\n@ColumnFamily\r\npublic class Account {\r\n\r\n    @Key\r\n    private String key;\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\n```java\r\n@ColumnFamily\r\npublic class Department {\r\n\r\n    @Key\r\n    private String key;\r\n\r\n    @MappedCollection\r\n    private List<Account> accounts;\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\n### @OnEvent\r\n\r\nThe special annotation [OnEvent](https://github.com/47deg/firebrand/blob/master/src/main/java/org/firebrand/dao/annotations/OnEvent.java) declares an entity method as event listener for the [Entity](#entity-events) and [Column](#column-events) Events broadcasted\r\nby the PersistenceFactory.\r\n\r\n```java\r\n@ColumnFamily\r\npublic class Account {\r\n\r\n    @Key\r\n    private String key;\r\n\r\n    @OnEvent(Event.Entity.PRE_PERSIST)\r\n    public void onPrePersist() {\r\n        //do something interesting here\r\n    }\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\n### @Transient\r\n\r\nFields declared as *@Transient* will be ignored for any persistence purposes.\r\n\r\n```java\r\n@ColumnFamily\r\npublic class Account {\r\n\r\n    @Key\r\n    private String key;\r\n\r\n    @Transient\r\n    private String hairColor;\r\n\r\n    ...\r\n\r\n}\r\n```\r\n\r\n## Events\r\n\r\nThe Persisence Factory is responsible for broadcasting events when certain operations are performed on entities and columns.\r\nSee [@OnEvent](#onevent) for more information on how to subscribe to a given event.\r\nThe following is a list for both Entity and Column events.\r\n\r\n### Entity Events\r\n\r\n* PRE_DELETE\r\n* POST_DELETE\r\n* PRE_LOAD\r\n* POST_LOAD\r\n* PRE_PERSIST\r\n* POST_PERSIST\r\n* POST_COMMIT\r\n\r\n### Column Events\r\n\r\n* PRE_COLUMN_MUTATION\r\n* PRE_COUNTER_MUTATION\r\n* POST_COLUMN_MUTATION\r\n* POST_COUNTER_MUTATION\r\n* PRE_COLUMN_DELETION\r\n* POST_COLUMN_DELETION\r\n\r\n## Type Converters\r\n\r\nType converters are in charge of converting from Java objects to ByteBuffer and back.\r\nFirebrand ships with type converters for the most common data types.\r\nAll type converters implement [org.firebrand.dao.TypeConverter](https://github.com/47deg/firebrand/blob/master/src/main/java/org/firebrand/dao/TypeConverter.java).\r\nYou may contibute new type converters or override the existing ones to the converters map at\r\norg.firebrand.dao.AbstractPersistenceFactory#getTypeConverters\r\n\r\n## CQL\r\n\r\nFirebrand queries are [CQL](http://cassandra.apache.org/doc/cql/CQL.html) queries.\r\nFirebrand supports both pre typed [Named Queries](#named-queries) and a dynamic [Query Builder](#query-builder) that makes building CQL queries programmatically\r\na breeze.\r\n\r\n### Query Builder\r\n\r\nImport the query builder static methods to avoid verbose statements.\r\n\r\n```java\r\nimport static org.firebrand.dao.cql.QueryBuilder.*;\r\n```\r\n\r\nChain statements as needed.\r\n\r\n```java\r\nselect(\r\n    allColumns(),\r\n\tfrom(\"Account\"),\r\n\twhere(\r\n\t\teq(\"name\", \"test\"),\r\n\t\teq(\"username\", \"test2\")\r\n\t)\r\n)\r\n```\r\n\r\n```sql\r\nSELECT * FROM Account WHERE 'name' = 'test' AND 'username' = 'test2';\r\n```\r\n\r\n### SELECT\r\n\r\n```java\r\nselect(\r\n    allColumns(),\r\n\tfrom(\"Account\"),\r\n\twhere(\r\n\t\teq(\"name\", \"test\"),\r\n\t\teq(\"username\", \"test2\")\r\n\t)\r\n)\r\n```\r\n\r\n```sql\r\nSELECT * FROM Account WHERE 'name' = 'test' AND 'username' = 'test2';\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#SELECT\r\n\r\n#### Specifying Columns\r\n\r\n*All columns*\r\n\r\n```java\r\nselect(\r\n    allColumns(),\r\n\tfrom(\"Account\")\r\n)\r\n```\r\n\r\n```sql\r\nSELECT * FROM Account;\r\n```\r\n\r\n*First N*\r\n\r\n```java\r\nselect(\r\n    first(5),\r\n    reversed(),\r\n\tfrom(\"Account\")\r\n)\r\n```\r\n\r\n```sql\r\nSELECT FIRST 5 REVERSED FROM Account;\r\n```\r\n\r\n*Range*\r\n\r\n```java\r\nselect(\r\n    columnRange(\"a\", \"z\"),\r\n\tfrom(\"Account\")\r\n)\r\n```\r\n\r\n```sql\r\nSELECT 'a'..'z' FROM Account;\r\n```\r\n\r\n*List*\r\n\r\n```java\r\nselect(\r\n    columns(\"a\",\"b\",\"c\"),\r\n\tfrom(\"Account\")\r\n)\r\n```\r\n\r\n```sql\r\nSELECT 'a','b','c' FROM Account;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#SpecifyingColumns\r\n\r\n#### Column Family\r\n\r\n```java\r\nselect(\r\n    allColumns(),\r\n\tfrom(\"Account\")\r\n)\r\n```\r\n\r\n```sql\r\nSELECT * FROM Account;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#ColumnFamily\r\n\r\n#### Consistency Level\r\n\r\n```java\r\nselect(\r\n    allColumns(),\r\n\tfrom(\"Account\"),\r\n\tconsistency(ConsistencyType.ONE)\r\n)\r\n```\r\n\r\n```sql\r\nSELECT * FROM Account USING CONSISTENCY ONE;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#ConsistencyLevel\r\n\r\n#### Filtering rows\r\n\r\nThe WHERE clause support filters for the rows that appear in results.\r\nThe supported operator are =, >, >=, <, <=.\r\n\r\n```java\r\nselect(\r\n    allColumns(),\r\n\tfrom(\"Account\"),\r\n\twhere(\r\n\t    eq(\"a\", 4),\r\n        lt(\"b\", \"test\"),\r\n        lte(\"c\", 0),\r\n        gt(\"d\", -234),\r\n        gte(\"e\", -92334),\r\n        between(\"f\", 1, 10),\r\n        keyIn(0, 1, 2, 3)\r\n\t)\r\n)\r\n```\r\n\r\n```sql\r\nSELECT * FROM Account\r\n    WHERE 'a' = '4' AND 'b' < 'test' AND 'c' <= '0' AND 'd' > '-234' AND 'e' >= '-92334'\r\n        AND 'f' >= '1' AND 'f' <= '10' AND KEY in ('0', '1', '2', '3');\",\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#Filteringrows\r\n\r\n#### Limits\r\n\r\nThe number of rows returned in a result may be limited with the LIMIT kewyord. If not specified the implicit limit is 10000.\r\n\r\n```java\r\nselect(\r\n    allColumns(),\r\n\tfrom(\"Account\"),\r\n\tlimit(10)\r\n)\r\n```\r\n\r\n```sql\r\nSELECT * FROM Account LIMIT 10;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#Limits\r\n\r\n### INSERT\r\n\r\n```java\r\ninsert(\r\n    columnFamily(\"Account\"),\r\n    into(\"KEY\", \"a\", \"b\", \"c\"),\r\n    values(1, 0, 1, 2),\r\n\twriteOptions(\r\n        consistency(ConsistencyType.ONE),\r\n        ttl(86400)\r\n    )\r\n)\r\n```\r\n\r\n```sql\r\nINSERT INTO Account (KEY, 'a', 'b', 'c') VALUES ('1', '0', '1', '2') USING CONSISTENCY ONE AND TTL 86400;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#INSERT\r\n\r\n### UPDATE\r\n\r\n```java\r\nupdate(\r\n    columnFamily(\"Account\"),\r\n    writeOptions(\r\n        consistency(ConsistencyType.ONE),\r\n        timestamp(546745),\r\n        ttl(34352)\r\n    ),\r\n    set(\r\n        assign(\"a\", 4),\r\n        assign(\"b\", \"test\"),\r\n\t\tassign(\"c\", 0)\r\n\t),\r\n    where(\r\n        key(4)\r\n    )\r\n)\r\n```\r\n\r\n```sql\r\nUPDATE Account USING CONSISTENCY ONE AND TIMESTAMP 546745 AND TTL 34352 SET 'a' = '4', 'b' = 'test', 'c' = '0' WHERE KEY = '4';\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#update\r\n\r\n### DELETE\r\n\r\n```java\r\ndelete(\r\n    columns(\"a\", \"b\", \"c\"),\r\n\tfrom(\"Account\"),\r\n\twriteOptions(\r\n\t\tconsistency(ConsistencyType.ONE),\r\n\t\ttimestamp(21342134)\r\n\t),\r\n\twhere(\r\n\t    keyIn(0, 1, 2, 3)\r\n\t)\r\n)\r\n```\r\n\r\n```sql\r\nDELETE 'a', 'b', 'c' FROM Account USING CONSISTENCY ONE AND TIMESTAMP 21342134 WHERE KEY in ('0', '1', '2', '3');\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#DELETE\r\n\r\n\r\n### TRUNCATE\r\n\r\n```java\r\ndelete(\r\n\tcolumnFamily(\"Account\")\r\n)\r\n```\r\n\r\n```sql\r\nTRUNCATE Account;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#TRUNCATE\r\n\r\n### BATCH\r\n\r\n```java\r\nbatch(\r\n    writeOptions(\r\n\t\tconsistency(ConsistencyType.ONE),\r\n\t\tttl(3600),\r\n\t\ttimestamp(2342134)\r\n\t),\r\n\tdelete(\r\n\t\tcolumns(\"a\", \"b\", \"c\"),\r\n\t\tfrom(\"ColumnFamily\")\r\n\t),\r\n\tinsert(\r\n\t    columnFamily(\"Account\"),\r\n\t\tinto(\"a\", \"b\", \"c\"),\r\n\t\tvalues(0, 1, 2)\r\n    ),\r\n\tupdate(\r\n\t    columnFamily(\"ColumnFamily\"),\r\n\t\tset(\r\n\t\t    assign(\"propertya\", 4)\r\n\t\t),\r\n\t\twhere(\r\n\t\t    key(4)\r\n\t\t)\r\n\t)\r\n)\r\n```\r\n\r\n```sql\r\nBEGIN BATCH USING CONSISTENCY ONE AND TTL 3600 AND TIMESTAMP 2342134\r\nDELETE 'a', 'b', 'c' FROM ColumnFamily;\r\nINSERT INTO Account ('a', 'b', 'c') VALUES ('0', '1', '2');\r\nUPDATE ColumnFamily SET 'propertya' = '4' WHERE KEY = '4';\r\nAPPLY BATCH;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#BATCH\r\n\r\n\r\n### CREATE KEYSPACE\r\n\r\n```java\r\ncreateKeyspace(\r\n\tkeySpace(\"KeySpaceName\"),\r\n    withStrategyClass(SimpleStrategy.class),\r\n\tstrategyOptions(\r\n\t\treplicationFactor(1)\r\n\t)\r\n)\r\n```\r\n\r\n```sql\r\nCREATE KEYSPACE KeySpaceName WITH strategy_class = SimpleStrategy AND strategy_options:replication_factor = 1;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#CREATEKEYSPACE\r\n\r\n### CREATE COLUMNFAMILY\r\n\r\n```java\r\ncreateColumnFamily(\r\n    columnFamily(\"ColumnFamilyName\"),\r\n\tcolumnDefinitions(\r\n\t\tprimaryKey(\"primaryKeyColumn\", ColumnDataType.UUID),\r\n\t\tcolumn(\"a\", ColumnDataType.TEXT),\r\n\t\tcolumn(\"b\", ColumnDataType.INT)\r\n\t),\r\n\tstorageOptions(\r\n\t\tstorageOption(StorageParameter.COMMENT, \"comment\"),\r\n\t\tstorageOption(StorageParameter.READ_REPAIR_CHANCE, \"1\")\r\n\t)\r\n)\r\n```\r\n\r\n```sql\r\nCREATE COLUMNFAMILY ColumnFamilyName (\r\n    'primaryKeyColumn' uuid PRIMARY KEY,\r\n\t'a' text,\r\n\t'b' int\r\n) WITH\r\n    comment = comment AND\r\n    read_repair_chance = 1;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#CREATECOLUMNFAMILY\r\n\r\n### CREATE INDEX\r\n\r\n```java\r\ncreateIndex(\r\n    onColumnFamily(\"ColumnFamily\"),\r\n\tindexName(\"myIndex\"),\r\n\tcolumn(\"myColumn\")\r\n)\r\n```\r\n\r\n```sql\r\nCREATE INDEX myIndex ON ColumnFamily ('myColumn');\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#CREATEINDEX\r\n\r\n### DROP KEYSPACE\r\n\r\n```java\r\ndrop(\r\n    keySpace(\"KeySpaceName\")\r\n)\r\n```\r\n\r\n```sql\r\nDROP KEYSPACE KeySpaceName;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#DROPKEYSPACE\r\n\r\n### DROP COLUMNFAMILY\r\n\r\n```java\r\ndrop(\r\n    columnFamily(\"ColumnFamilyName\")\r\n)\r\n```\r\n\r\n```sql\r\nDROP COLUMNFAMILY ColumnFamilyName;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#DROPCOLUMNFAMILY\r\n\r\n### DROP INDEX\r\n\r\n```java\r\ndrop(\r\n    indexName(\"myIndex\")\r\n)\r\n```\r\n\r\n```sql\r\nDROP INDEX myIndex;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#DROPINDEX\r\n\r\n### ALTER COLUMNFAMILY\r\n\r\n```java\r\nalterColumnFamily(\r\n    columnFamily(\"ColumnFamily\"),\r\n\tadd(\"myColumn\", ColumnDataType.INT)\r\n)\r\n```\r\n\r\n```sql\r\nALTER COLUMNFAMILY ColumnFamily ADD 'myColumn' int;\r\n```\r\n\r\nhttp://cassandra.apache.org/doc/cql/CQL.html#ALTERCOLUMNFAMILY\r\n\r\n### Value Converters\r\n\r\nThe Firebrand CQL Query Builder comes with a few utility converters that convert some common data types in their\r\nCQL value as mapped by Firebrand.\r\n\r\nAll CQL value converters are implementers of [org.firebrand.dao.cql.converters.CQLValueConverter](https://github.com/47deg/firebrand/blob/master/src/main/java/org/firebrand/dao/cql.converters/CQLValueConverter.java).\r\n\r\nYou may contribute your own converters or override the default configured ones with\r\norg.cassandraobjects.dao.cql.QueryBuilder#addConverter"}